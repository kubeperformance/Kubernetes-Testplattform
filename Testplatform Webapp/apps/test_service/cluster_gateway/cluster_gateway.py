from django.db import models
from kubernetes import client, config, watch
from apps.test_service.testevent.event_service import TestEventService
from apps.test_service.models import Test, TestEvent, Node
from kubernetes.client.exceptions import ApiException
import os


class ClusterGateway:
    """
    A class responsible for connecting to the Kubernetes API based on a 
    local Configuration file. There are also functions for retrieving 
    specific information from the cluster e.g. the status of a CR or
    or the logs from a specific pod.
    
    """



    @staticmethod
    def get_status_for_cr(cr_name, plural, namespace):
        
        '''
        Queries the Kubernetes-API for the completion status of a test-CR after loading the kubeconfig. 

            Parameters: 
                        cr_name (str): CR Name
                        plural (str): Plural of the Kubernetes resource
                        namespace (str): Namespace
            Returns:
                       my_status (str): Status as returned by the Kubernetes API
        '''

        ClusterGateway.load_kubeconfig()

        my_status = ""

        try:
            custom_objects_api = client.CustomObjectsApi() 
            
            cr = custom_objects_api.get_namespaced_custom_object(
            group="perf.kubestone.xridge.io", 
            version="v1alpha1",
            namespace=namespace,
            plural=plural,
            name=cr_name)

            if "status" in cr:
                my_status = cr["status"]["completed"]
                
        except ApiException as e:
            print('Found exception in getting Custom Resource')
            my_status = "False"
            return str(my_status)
            

        return str(my_status)


    @staticmethod
    def get_logs_from_pod(pod_name, namespace):

        '''
        Queries the Kubernetes-API for the raw output of a pod in a given namespace. 

            Parameters: 
                        pod_name (str): Name of the pod
                        namespace (str): Pods namespace
            Returns:
                       api_response (str): Kubernetes Response or empty String if request fails
        '''
        
        print("Getting Logs for Pod: " + pod_name)
        api_response = ""
        v1 = client.CoreV1Api()
        
        try:
            api_response = v1.read_namespaced_pod_log(name=pod_name, namespace=namespace)
                     
        except ApiException as e:
            print('Found exception in reading the logs')            

        return api_response


    @staticmethod
    def create_cr_in_cluster(cr_as_dict, plural, namespace):
        '''
        Creates a new CR as a Kubernetes resource in the cluster via the Kubernetes-API.

            Parameters: 
                        cr_as_dict (dict): Custom Resource Definition to be created in the Cluster as a dictionary (Representation of a .yml equivalent)
                        plural (str): Plural of the Kubernetes resource
                        namespace (str): Namespace where the resource should be created 
            Returns:
                       (Boolean): True if the resource was created successfully, False otherwise
        '''

        try:
                      
            #For windows: config_string = cwd + "\\apps\\test_service\\config\\kubeconfig.yml"
            ClusterGateway.load_kubeconfig()
            custom_objects_api = client.CustomObjectsApi()
            custom_objects_api.create_namespaced_custom_object(
            group="perf.kubestone.xridge.io", 
            version="v1alpha1",
            namespace=namespace,
            plural=plural,
            body=cr_as_dict)
        
            print("Created Custom Resource")
            return True     
            
        except ApiException as e:
            print('Exception during CRD Creation')
            return False
        
        
    # Continue Commenting
    @staticmethod
    def watch_events_in_namespace(test_id, namespace):
        '''
        Watches the events generated by Kubernetes regarding the created test-resource. The user given name 
        serves as an identifier for the CR. The Function analyzes the event stream and creates Events
        for the test in question. On pod creation the pod name of the test gets updated. 

            Parameters: 
                        test_id (int): 
                        namespace (str): Namespace where the resource should be created 
            Returns:
                       None
        '''
        test =  Test.objects.get(pk=test_id)                
        cr_name  = test.custom_test_name
        test_start_time = test.time_created        
        
       
        v1 = client.CoreV1Api()
        
        w = watch.Watch()       
        

        for event in w.stream(v1.list_namespaced_event, namespace, timeout_seconds=15):
            event_object = event["object"]
            
            print("Event: from %s Message: %s at %s. Source: %s"  % (
               
                event_object.metadata.name, # e.g. myindividualtestname.16be19d638b35910
                event_object.message,
                event_object.last_timestamp,
                event_object.source ))

            if(cr_name in event_object.metadata.name):
                print("Event: from %s  Message:  %s at %s. Source: %s"  % (
               
                event_object.metadata.name, # e.g. myindividualtestname.16be19d638b35910
                event_object.message,
                event_object.last_timestamp,
                event_object.source ))

                #2021-12-06 08:26:13+00:00
                event_time = event_object.last_timestamp

                if event_time == None: 
                    print("Event-Time is null. Continuing")
                    continue                               


                #if(test_start_time < event_time):
                #print("Identified relevant event: " + event_object.message)
    
                if ("Started Container" in event_object.message):
                    TestEventService.create_test_event(test=test, timestamp=event_time, message=event_object.message, state=TestEvent.EventStates.STARTED_CONTAINER)
                    

                elif("Created pod" in event_object.message ):                
                    
                    TestEventService.create_test_event(test=test, timestamp=event_time, message=event_object.message, state=TestEvent.EventStates.POD_CREATED)
                    ClusterGateway.update_pod_name_for_created_test(test=test, event_message=event_object.message)
                    print("Pod name found")
                
                elif("Job completed" in event_object.message ):                
                    TestEventService.create_test_event(test=test, timestamp=event_time, message=event_object.message, state=TestEvent.EventStates.JOB_COMPLETED)
                    

                elif("Deleted" in event_object.message ):                
                    TestEventService.create_test_event(test=test, timestamp=event_time, message=event_object.message, state=TestEvent.EventStates.RESOURCE_DELETED)
                        
        
           # w.stop()
        return None


    @staticmethod
    def update_pod_name_for_created_test(test, event_message):
        '''
        Extracts the pod name from a given String. The Name is saved for
        the given test.

            Parameters: 
                        test (Test):  Test Object
                        event_message (str): String generated by the Kubernetes API containing the pod name
            Returns:
                       None
        '''


        pod_name = event_message.split(":", 1)[1]
        pod_name = pod_name.replace(" ","")
        print("Podname: " + pod_name)

        test.pod_name = pod_name
        test.save(update_fields=['pod_name'])
        
        return 

    @staticmethod
    def load_kubeconfig():
        '''
        Loads the Kube-Config file from a local directory


            Parameters: 
                       None
            Returns:
                       None
        '''

        cwd = os.getcwd()
        config_string = cwd + "/apps/test_service/config/kubeconfig.yml"        
        config.load_kube_config(config_file=config_string)
    
    @staticmethod
    def get_nodes():
        '''
        Queries all nodes in the Cluster from the Kubernetes API and returns a List of Kubernetes-Nodes.

            Parameters: 
                       None       
            Returns:
                       node_objects (list of Node): List containing the node objects
        '''

        
        ClusterGateway.load_kubeconfig()
        v1 = client.CoreV1Api()
        nodes = v1.list_node()
        
        node_objects = []

        for node in nodes.items:
            
            address = node.status.addresses[0].address
            node_name = node.metadata.name
            node_os = node.status.node_info.os_image
            node_arch = node.status.node_info.architecture
            
            node_objects.append(Node(ip_address=address, name=node_name, os=node_os, architecture=node_arch))
            print("")

        return node_objects
