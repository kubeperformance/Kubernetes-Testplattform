from ast import Return
from os import stat

from urllib3 import Retry
from apps.test_service.cluster_gateway.cluster_gateway import ClusterGateway
from apps.test_service.models import Test, TestEvent
from apps.test_service.testevent.event_service import TestEventService
from apps.test_service.testresult.test_result_service import TestResultService

import time, threading
from datetime import datetime


class TestMonitoring:
    """
    A class containing functions for test monitoring. This includes for updating the
    test status at runtime and writing logs for a given test. 

    """
    
    @staticmethod    
    def start_test_monitoring(test_id, namespace):
        '''
        Calls the functions for monitoring a test. Each method is executed in its own daemon Thread. 


            Parameters: 
                        test_id (int):  Test ID
                        namespace (str): String generated by the Kubernetes API containing the pod name
            Returns:
                       None
        '''
        test_status_thread = threading.Thread(target=TestMonitoring.update_status_for_test, args=[test_id], daemon=True)
        test_status_thread.start()

        watch_events_thread = threading.Thread(target=ClusterGateway.watch_events_in_namespace, args=[test_id, namespace], daemon=True)
        watch_events_thread.start()

        return


       

    @staticmethod
    def update_status_for_test(test_id):
        '''
        Queries a test CR for the current status and waits until the test is completed. 
        The status of the Test object in the database is updated accordingly. After 
        completion functions responsible for writing the logs and initiating the result
        analysis process are invoked.

            Parameters:
                        test_id (int):  Test ID
            Returns:
                        None
        '''

        test = Test.objects.get(pk=test_id)
        status = "False"

        timeout = 100
        timeout_count = 0
        
        while status!= "True":
            
            status = ClusterGateway.get_status_for_cr(test.custom_test_name, test.plural, test.namespace)
            
            time.sleep(2)
            if timeout_count == timeout: 
                print("Stopped requesting Status for CR. Timeout reached.")
                break;
            
            timeout_count = timeout_count + 1
        
        print("Test Completed!!")
        TestEventService.create_test_event(test, datetime.utcnow(), "Test Completed", TestEvent.EventStates.COMPLETED)
        test.test_status = Test.TestStatusTypes.COMPLETED
        test.save(update_fields=['test_status'])
        # Trigger Log Write on completion
        
        TestMonitoring.write_logs_for_test(test_id) 
        TestResultService.create_result_after_finsih(test_id)



    
    @staticmethod
    def write_logs_for_test(test_id):
        '''
        Calls the method responsible for obtaining the raw output of the test-pod. The given test
        is loaded and updated with the new output information inside the database. 

            Parameters: 
                        test_id (int):  Test ID
            Returns:
                        None
        '''

        test = Test.objects.get(pk=test_id)
        logs = ClusterGateway.get_logs_from_pod(test.pod_name, test.namespace)
        print("Logs Have Been Saved")
        test.raw_output = logs
        test.save(update_fields=['raw_output'])

        return None
                                                        

        
        